import logging
import json
import os
from aiogram import Bot, Dispatcher, executor, types
from config import BOT_TOKEN
from utils import is_admin, add_premium_user, is_premium_user

# ЁЯФз Logging setup
logging.basicConfig(level=logging.INFO)

# ЁЯдЦ Initialize Bot and Dispatcher
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# тЬЕ /start Command
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user_id = message.from_user.id

    # ЁЯФР Save user ID in users.json
    if not os.path.exists("users.json"):
        with open("users.json", "w") as f:
            json.dump([], f)

    with open("users.json", "r+") as f:
        users = json.load(f)
        if user_id not in users:
            users.append(user_id)
            f.seek(0)
            json.dump(users, f)

    await message.answer(
        f"ЁЯСЛ рдирдорд╕реНрддреЗ {message.from_user.first_name}!\n\n"
        "ЁЯЩП рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ *Top Study Notes Bot* рдореЗрдВ!\n"
        "ЁЯУЪ рдпрд╣рд╛рдВ рдЖрдк Free рдФрд░ Premium Notes рдкрд╛ рд╕рдХрддреЗ рд╣реИрдВред\n\n"
        "ЁЯзн рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /help рджрдмрд╛рдПрдВред",
        parse_mode="Markdown"
    )

# тЬЕ /help Command
@dp.message_handler(commands=["help"])
async def help_command(message: types.Message):
    await message.answer(
        "ЁЯУЪ *Download notes:* [Click here](https://t.me/TopStudyPDFBot/files)\n\n"
        "ЁЯУМ *Available Commands:*\n"
        "/start - рд╡реЗрд▓рдХрдо рдореИрд╕реЗрдЬ\n"
        "/help - рд╣реЗрд▓реНрдк рдХрдорд╛рдВрдб\n"
        "/notes - рдлреНрд░реА рдиреЛрдЯреНрд╕ рдкрд╛рдПрдВ\n"
        "/premium - рдкреНрд░реАрдорд┐рдпрдо рдПрдХреНрд╕реЗрд╕ рдЬрд╛рдиреЗрдВ\n"
        "/premiumnotes - рдкреНрд░реАрдорд┐рдпрдо рдиреЛрдЯреНрд╕ рдкрд╛рдПрдВ\n"
        "/contact - рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ\n"
        "/addpremium user_id - рдкреНрд░реАрдорд┐рдпрдо рдпреВрдЬрд░ рдЬреЛрдбрд╝реЗрдВ (рдХреЗрд╡рд▓ рдПрдбрдорд┐рди рдХреЗ рд▓рд┐рдП)",
        parse_mode="Markdown"
    )

# тЬЕ /notes Command
@dp.message_handler(commands=['notes'])
async def send_notes(message: types.Message):
    await message.answer(
        "ЁЯУе *рдпрд╣рд╛рдВ рд╕реЗ PDF Notes рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ:*\n"
        "ЁЯФЧ https://example.com/your-notes-link\n\n"
        "_Note: рдпрд╣ Free Notes рд╣реИрдВ_",
        parse_mode="Markdown"
    )

# тЬЕ /premium Command
@dp.message_handler(commands=['premium'])
async def premium_info(message: types.Message):
    await message.answer(
        "ЁЯТО *Premium Access Details:*\n"
        "тЬЕ рд╕рднреА Subjects рдХреЗ Notes\n"
        "тЬЕ рдмрд┐рдирд╛ Ads рдХреЗ рдЙрдкрдпреЛрдЧ\n"
        "тЬЕ Early Access to New Notes\n\n"
        "ЁЯТ░ *Price:* тВ╣49/- per month\n"
        "ЁЯУ▓ Pay via UPI: yourupi@upi\n"
        "ЁЯз╛ Contact: @skguidehelper",
        parse_mode="Markdown"
    )

# тЬЕ /contact Command
@dp.message_handler(commands=['contact'])
async def contact_admin(message: types.Message):
    await message.answer("ЁЯУ▓ рдХрд┐рд╕реА рднреА рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ: @skguidehelper")

# тЬЕ /addpremium Command
@dp.message_handler(commands=['addpremium'])
async def add_premium(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("тЭМ рдЖрдкрдХреЛ рдпрд╣ command рдЪрд▓рд╛рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")
        return

    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            await message.reply("тЪая╕П рд╕рд╣реА рдЙрдкрдпреЛрдЧ:\n`/addpremium user_id`", parse_mode="Markdown")
            return

        target_id = int(parts[1])
        if add_premium_user(target_id):
            await message.reply(f"тЬЕ рдпреВрдЬрд╝рд░ {target_id} рдХреЛ Premium Access рджреЗ рджрд┐рдпрд╛ рдЧрдпрд╛ред")
        else:
            await message.reply("тД╣я╕П рдпрд╣ рдпреВрдЬрд╝рд░ рдкрд╣рд▓реЗ рд╕реЗ рд╣реА Premium User рд╣реИред")

    except Exception as e:
        await message.reply(f"тЪая╕П Error: {str(e)}")

# тЬЕ /premiumnotes Command
@dp.message_handler(commands=['premiumnotes'])
async def send_premium_notes(message: types.Message):
    user_id = message.from_user.id
    if not is_premium_user(user_id):
        await message.reply(
            "ЁЯФТ рдпрд╣ рдлрд╝реАрдЪрд░ рдХреЗрд╡рд▓ *Premium Users* рдХреЗ рд▓рд┐рдП рд╣реИред\n\n"
            "ЁЯТ░ Premium Access рдХреЗ рд▓рд┐рдП тВ╣49/- рдкреНрд░рддрд┐ рдорд╛рд╣ рдХрд╛ рднреБрдЧрддрд╛рди рдХрд░реЗрдВред\n"
            "ЁЯУ▓ Pay via UPI: yourupi@upi\n"
            "ЁЯз╛ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ: @skguidehelper",
            parse_mode="Markdown"
        )
        return

    try:
        file_path = "notes/sample_notes.pdf"
        with open(file_path, "rb") as doc:
            await message.answer_document(
                doc,
                caption="ЁЯТО *Premium PDF Notes*",
                parse_mode="Markdown"
            )
    except Exception as e:
        await message.reply(f"тЪая╕П Error sending PDF: {str(e)}")

# тЬЕ Document Upload by Admin (Save)
@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_upload_pdf(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        await message.reply("тЭМ рдЖрдкрдХреЛ PDF рдЕрдкрд▓реЛрдб рдХрд░рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")
        return

    try:
        document = message.document
        file_name = document.file_name
        caption = message.caption or "ЁЯУД рдирдпрд╛ рдиреЛрдЯреНрд╕ рдЙрдкрд▓рдмреНрдз рд╣реИред"

        os.makedirs("notes", exist_ok=True)
        file = await bot.get_file(document.file_id)
        await document.download(destination_file=f"notes/{file_name}")

        await message.reply(f"тЬЕ PDF '{file_name}' рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реЗрд╡ рд╣реЛ рдЧрдпрд╛!\n\nтД╣я╕П Caption: {caption}")

        # Broadcast to users (Optional future step)

    except Exception as e:
        await message.reply(f"тЪая╕П Error: {str(e)}")

# тЬЕ Broadcast PDF to all users by Admin
@dp.message_handler(commands=['broadcast'])
async def wait_for_pdf(message: types.Message):
    if is_admin(message.from_user.id):
        await message.reply("ЁЯУд рдХреГрдкрдпрд╛ рд╡рд╣ PDF рднреЗрдЬреЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд╕рднреА users рдХреЛ рднреЗрдЬрдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред")
    else:
        await message.reply("тЭМ рдЖрдкрдХреЛ рдпрд╣ рдХрдорд╛рдВрдб рдЪрд▓рд╛рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рдирд╣реАрдВ рд╣реИред")

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def broadcast_pdf(message: types.Message):
    user_id = message.from_user.id
    if not is_admin(user_id):
        return  # Ignore document from non-admin

    if not os.path.exists("users.json"):
        await message.reply("тЪая╕П рдХреЛрдИ рднреА рдпреВрдЬрд╝рд░ рдлрд╝рд╛рдЗрд▓ рдореЗрдВ рдореМрдЬреВрдж рдирд╣реАрдВ рд╣реИред")
        return

    try:
        with open("users.json", "r") as f:
            users = json.load(f)

        doc = message.document
        for uid in users:
            try:
                await bot.send_document(uid, doc.file_id, caption="ЁЯУШ *рдирдП Notes рдЙрдкрд▓рдмреНрдз рд╣реИрдВ!*", parse_mode="Markdown")
            except Exception as e:
                logging.error(f"тЭМ Cannot send to {uid}: {str(e)}")

        await message.reply("тЬЕ рд╕рднреА рдпреВрдЬрд╝рд░реНрд╕ рдХреЛ PDF рднреЗрдЬ рджреА рдЧрдИред")

    except Exception as e:
        await message.reply(f"тЪая╕П Error: {str(e)}")

# тЬЕ Run the bot
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

